#!/usr/bin/env python 
# -*- coding:utf-8 -*-
import torch
import argparse
import numpy as np
from model import STDGN, STDGN_woa
from graph_evolution import Evolution, print_genetation
from trainer import trainer
import time
from tester import test

parser = argparse.ArgumentParser(description='PyTorch Time series forecasting')
parser.add_argument('--data', type=str, default='data/DataSet.npy',
                    help='location of the dataset file')
parser.add_argument('--save', type=str, default='data/model.pkl',
                    help='path to save the final model')

# hyper-parameter of model
parser.add_argument('--depth', type=int, default=1, help='denseGNN depth')
parser.add_argument('--heads', type=int, default=2, help='heads of multi-head attention')
parser.add_argument('--dropout', type=float, default=0.1, help='dropout rate')
parser.add_argument('--feature', type=int, default=9, help='features used in prediction')
parser.add_argument('--nodes', type=int, default=184, help='number of nodes')
parser.add_argument('--units', type=int, default=64, help='hidden units')
parser.add_argument('--his_len', type=int, default=16, help='input sequence length')
parser.add_argument('--pre_len', type=int, default=8, help='output sequence length')
parser.add_argument('--adj_TIN', type=str, default='data/TIN_adj.npy', help='adj generated by TIN')
parser.add_argument('--adj_Geo', type=str, default='data/Geo_adj.npy', help='adj generated by Geo-threshold')
parser.add_argument('--adj_Set', type=str, default='data/AdjSet(GE).npy', help='best two adjs by graph evolution')

# hyper-parameter of training
parser.add_argument('--batch_size', type=int, default=200, help='batch size')
parser.add_argument('--train', type=float, default=0.8, help='ratio of training set')
parser.add_argument('--lr', type=float, default=2e-3, help='learning rate')
parser.add_argument('--weight_decay', type=float, default=0, help='weight decay rate')
parser.add_argument('--epochs', type=int, default=200, help='epochs')
parser.add_argument('--optim', type=str, default='adam')
parser.add_argument('--device', type=str, default='cuda:0', help='CUDA id')

# hyper-parameter of graph evolution
parser.add_argument('--num_CUDA', type=int, default='3', help='number of CUDA used in graph evolution')
parser.add_argument('--mutation_pro', type=float, default=0.1, help='mutation probability')
parser.add_argument('--cross_pro', type=float, default=0.8, help='crossing probability')
parser.add_argument('--k_min', type=int, default=6, help='the minimum k in KNN')
parser.add_argument('--k_max', type=int, default=23, help='the maximum k in KNN')
parser.add_argument('--dis_thres', type=int, default=3, help='the threshold of distance')
parser.add_argument('--alt_thres', type=int, default=1200, help='the threshold of altitude')
parser.add_argument('--iter', type=int, default=20, help='generation of graph evolution')
parser.add_argument('--tournament', type=int, default=5, help='number of selection of evolutionary tournament')
parser.add_argument('--pareto', type=str, default='data/Pareto(GE)', help='pareto front of no dominant')
args = parser.parse_args()
device = torch.device(args.device)
dataset = np.load(args.data)
x = dataset[:5848, :, :]
y = dataset[:5848, :, -1]


if __name__ == "__main__":
    # graph evolution
    TIN = np.load(args.adj_TIN) - np.eye(184)
    Geo = np.load(args.adj_Geo) - np.eye(184)
    other_adj = [TIN, Geo]
    pop_num = 2 + args.k_max - args.k_min + 1
    E = Evolution(pop=pop_num, iter=args.inter, cross_pro=args.cross_pro, mutation_pro=args.mutation_pro, index_group=[args.k_min, args.k_max])
    E.register_on_new_generation(print_genetation)
    adj_set = []
    front = E.evolve(other_adj=other_adj)
    np.save(args.pareto, E.history)
    best = E.acc_best(front)
    print('--------------------------------best--------------------------------')
    model_par = 0
    for b in best:
        adj = b.index_to_matrix() + np.eye(b.matrix_size)
        model_par += 1
        adj_set.append(adj)
    np.save(args.adj_Set, adj_set)

    device = torch.device(args.device if torch.cuda.is_available() else "cpu")
    adj = torch.tensor(np.load(args.adj_Set)[0], dtype=torch.float32)
    model = STDGN(num_units=args.units, adj=adj, num_nodes=args.nodes, num_feature=args.feature, num_head=args.heads,
                  seq_len=args.his_len, pre_len=args.pre_len, device=device, deep=args.depth)

    model_trainer = trainer(model=model, epoch=args.epochs, batch=args.batch_size, lr=args.lr, decay=args.weight_decay, his_step=args.his_len,
                            pre_step=args.pre_len, x=x, y=y, train=args.train, valid=None, device=device)

    _, model = model_trainer.train()

    test(model, his_step=args.his_len, pre_step=args.pre_len, x=x, y=y)
